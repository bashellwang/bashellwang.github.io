<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python3 入门之 Python 初探]]></title>
    <url>%2F2017%2F08%2F04%2F2017-08-04%20Python3-%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[前言 ：人生苦短，我用 Python 概述Python 是目前最为火热的脚本语言之一，它 “优雅、明确、简单”，被应用于后台服务，网站 Web，数据分析，机器学习等方方面面。作为一个 Android 开发人员，也是很有必要掌握一门第二语言，这里就记录下我的 Python 学习之路，主要学习廖雪峰的 Python 教程。 Python 安装Python 是跨平台的，可以运行于 Windows、Mac 和各种 Linux／Unix 系统上。目前 Python 有两个版本，一个是 2.x 版，一个是 3.x 版，可气的是 3.x 版本居然不向前兼容 2.x 版本；由于目前 3.x 版本越来越普及， 我们就以 Python 3.x 版本开始学习吧。 Mac 安装 Python我的 Mac 版本号是 10.12.5，系统自带 Python 2.7，因此我们需要安装 Python 3.x 版本。 Python 官网下载最新版本，双击安装即可 如果安装了 Homebrew，直接通过命令 brew install python3 安装即可 运行 Python在命令行中输入 python3 即可看到如下信息，说明我们安装成功。前面不是说系统有自带 Python 2.7 版本吗，在命令行中输入 python 即可使用 2.7 版本。 看到如上图所示的系统提示符 &gt;&gt;&gt;，说明已经进入 Python 运行环境，在这里即可开始进行程序的编辑及运行。退出 Python 运行环境也很简单，直接命令行输入 exit() 即可。 第一个 Python 程序Python 交互式环境在交互式环境提示符 &gt;&gt;&gt; 下，使用 print() 函数输出指定字符串，字符串使用单引号或双引号均可，但是不能混用单双引号。交互式模式相当于启动了 Python 解释器，等待一行行的代码输入并一行行执行。 &gt;&gt;&gt; print(&apos;Hello Python!&apos;) Hello Python! 命令行模式新建文件 hello.py ，将上述内容写入后保存，打开命令行，输入 python3 hello.py 即可得到输出结果。这种模式相当于启动解释器，一次性将源代码读取执行了，用户不能向交互式模式那样输入源码。 ➜ Desktop python3 hello.py Hello Python! 文本编辑器在交互模式下，可以一下子就得到结果，但是没法保存程序，每次运行时都需要重新输入一遍。因此我们一般都是把程序保存成 .py 格式的文件，后续就可以反复使用运行了。 编辑器使用 Sublime Text 或 Nodepad++ 等市面上常见的编辑器均可，但是千万不要使用 Word 和 Windows 系统自带的记事本编辑。 直接运行 Python 文件如果你想在 Mac 下直接运行 Python 文件，那么只需要在 .py 文件的第一行加上如下特殊解释 123#!/user/bin/env python3print(&apos;Hello Python!&apos;) 然后，给文件添加执行权限 1chmod a+x hello.py 即可直接在命令行运行该文件了 ./hello.py ok，到现在为止，我们已经安装了 Python 开发环境、开发了第一个 Python 程序，怎么样，是不是感觉比较简单呢。我们下一篇将开始进行 Python 的语法学习！]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RecyclerView 控件的使用]]></title>
    <url>%2F2017%2F08%2F02%2F2017-08-02%20RecyclerView-%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言 最近在做一个滑动列表的需求，现将 RecyclerView 的使用知识记录总结下 概述RecyclerView 是 android.support.v7 包下的一个组件，根据官方文档说明，它是一个可以在有限屏幕区域提供大量数据集的灵活视图组件。 那么它和我们熟悉的 ListView 和 GridView 有什么区别呢，或者说对比已有的两个组件，RecyclerView 有什么优势呢？整体来说，RecyclerView 提供了更为灵活的体验，高度解耦，开发者可以使用不同的 LayoutManager，ItemDecoration，ItemAnimator 来实现各种自定义效果。 LayoutManager 通过布局管理器，可以轻松实现类似 ListView，GridView 和 流式布局等效果 ItemDecoration 通过它可以控制 Item 间的间隔，实现自定义间隔样式 ItemAnimator 使用它来控制 Item 的增删等动画效果 点击事件 RecyclerView 的点击事件需要自己来实现（提供了 OnItemTouchListener 接口） 使用导入库包在 gradle 文件中引入 v7 包 compile &#39;com.android.support:recyclerview-v7:21.0.3&#39; 布局中使用在 xml 布局文件中使用 &lt;android.support.v7.widget.RecyclerView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;/android.support.v7.widget.RecyclerView&gt; Activity 中设置在 Activity 中获取 RecyclerView 组件，进行以下设置： 设置数据适配器（必须） 设置布局管理器（必须） 设置 Item 增加、移除动画（非必须） 添加分割线（非必须） Adapter继承实现 RecyclerView.Adapter&lt;VH extends ViewHolder&gt; 类，作为 RecyclerView 的数据适配器，主要实现以下几个方法 onCreateViewHolder（创建 ViewHoldre，初始化填充 ItemView 布局） onBindViewHolder（绑定 ViewHolder，进行数据的展示处理） getItemViewType（获取 ItemView 类型，主要运用于多布局） getItemCount（获取 Item 个数） 注意在 onCreateViewHolder 中，填充 View 时建议使用如下格式： 1View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_1, parent, false); LayoutManagerRecyclerView.LayoutManager 是一个抽象类，系统默认提供了三个实现类： LinearLayoutManager 线性布局管理器，支持横向及纵向布局 GridLayoutManager 网格式布局管理器 StaggeredGridLayoutManager 瀑布流式布局管理器 将不同布局管理器设置到 RecyclerView 中，即可实现不同的布局；当然也可以继承 RecyclerView.LayoutManager 从而实现自定义布局 ItemDecoration通过 RecyclerView.addItemDecoration() 方法可以添加分割线，该类为一个抽象类，开发者需要自己来进行实现 public static abstract class ItemDecoration { public void onDraw(Canvas c, RecyclerView parent, State state) { onDraw(c, parent); } @Deprecated public void onDraw(Canvas c, RecyclerView parent) { } public void onDrawOver(Canvas c, RecyclerView parent, State state) { onDrawOver(c, parent); } @Deprecated public void onDrawOver(Canvas c, RecyclerView parent) { } @Deprecated public void getItemOffsets(Rect outRect, int itemPosition, RecyclerView parent) { outRect.set(0, 0, 0, 0); } public void getItemOffsets(Rect outRect, View view, RecyclerView parent, State state) { getItemOffsets(outRect, ((LayoutParams) view.getLayoutParams()).getViewPosition(),parent); } } 当我们使用 RecyclerView.addItemDecoration 方法时，RecyclerView 会进行绘制，主要是通过 onDraw() 和 onDrawOver() 方法 onDraw() : 绘制分割线 onDrawOver() : 在 onDraw() 之后绘制，一般覆写其中一个即可 getItemOffsets() : 通过 outRect.set() 为每个 item 设置偏移量，即用来设置分割线的宽、高 Item AnimatorRecyclerView 能够通过 mRecyclerView.setItemAnimator(ItemAnimator animator) 设置添加、删除、移动、改变的动画效果。RecyclerView 提供了默认的 ItemAnimator 实现类：DefaultItemAnimator 多布局实现RecyclerView 可以通过 getItemViewType 获取不同的布局类型，进行对应布局的填充，有点类似 ListView ；利用这个接口可以轻松实现头布局和尾布局的添加 结语综合来看，RecyclerView 提供了一种低耦合，插拔式的滑动布局体验，通过 LayoutManager 可以只需一行代码实现布局格式的切换，轻松实现 ListView、GridView 等布局效果，更是可以支持自定义分割线处理。 参考 Android RecyclerView 使用完全解析 DividerItemDecoration RecyclerView 优秀文集]]></content>
      <tags>
        <tag>RecyclerView</tag>
        <tag>SupportV7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac 下 Hexo 和 Github 搭建博客]]></title>
    <url>%2F2017%2F06%2F30%2F2017-06-30%20Mac-%E4%B8%8B-Hexo-%E5%92%8C-Github-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[写在前面之前在 Windows 下操作过一次博客搭建过程，不过后面没有写什么内容，也就慢慢废弃了。转岗到新部门后申请到了 Mac 电脑，在使用了一段时间之后，不得不感慨 Mac 电脑对于开发人员的便捷舒适。这里尽量将自己平时的工作总结进行记录备忘，那么就从搭建博客开始吧。 注册 GitHub 账号在 Github 上进行注册，这个比较简单，按照正常操作即可。 创建仓库 (repo)，这个仓库是和我们的博客关联起来的，后续博客文章资源都是存放在这个仓库当中。使用 Hexo 时，repo 的名字应该按照 your_github_username.github.io 来命名。一个账号一般只能对应一个博客。 安装 Git、Node.js 和 Hexo Mac 电脑本身自带 Git ，无需安装 在 Nodejs 官网下载安装；用来下载 Hexo 等工具及插件 在命令行使用 npm install -g hexo-cli 来下载安装 Hexo 注意: 公司开发网需要设置代理 npm config set proxy=http://dev-proxy.oa.com:8080 如果发现没有权限，则使用如下命令 sudo npm install -g hexo-cli 搭建博客博客初始化建立一个博客文件夹，比如 “GitRoom”，进入到文件夹后进行初始化操作 12$ cd GitRoom$ hexo init 安装依赖包 1$ npm install 这样设置后，我们就可以在博客文件夹中看到多了很多文件和目录 博客配置博客站点的配置信息在 _config.yml 文件中，我们主要修改如下几点即可（注意每一项的「 : 」后需要保留一个空格） 网站基本信息 123456title: bashellwang 的小书屋subtitle:description: 路漫漫其修远兮author: bashellwanglanguage: zh-Hanstimezone: Asia/Shanghai 绑定 Github 1234deploy: type: git repo: https://github.com/bashellwang/bashellwang.github.io.git branch: master 博客本地部署测试一般我们在发布到正式环境前会先本地部署看看效果，使用如下命令： 1$ hexo server 此时，正常情况下应该会显示如下；在浏览器中输入 http://localhost:4000/ 即可看到搭建好的博客和文章了。 博客发布到正式环境12$ npm install hexo-deployer-git --save$ hexo deploy 这时我们就可以在 GitHub 的仓库中看见我们提交的网站相关资源了；此时在浏览器中输入 your_github_name.github.io 就可以打开我们博客的主页了。 新建文章1$ hexo new &quot;article_title&quot; 即可在本地文件夹 /source/_post 下看到我们新建的 markdown 文件；使用 markdown 编辑器编写文章内容后保存（ mac 推荐使用 MacDown 软件）；生成静态网页文件并发布到网上 12$ hexo generate$ hexo deploy 更多 Hexo 操作请参考 Hexo 操作指南 删除文章在本地文件夹 /source/_post 目录下删除对应的 .md 文件，然后重新生成静态网页文件并发布 12$ hexo generate$ hexo deploy 每次当博客发生问题或错误时，建议先进行 clean 操作并重新生成静态网页 12$ hexo clean$ hexo g Hexo 常用命令1234567891011121314hexo help #查看帮助hexo init #初始化一个目录hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成网页，可以在 public 目录查看整个网站的文件hexo server #本地预览，&apos;Ctrl+C&apos;关闭hexo deploy #部署.deploy目录hexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**简写：hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 博客主题修改Hexo 支持多种主题，并且可以轻易修改主题风格。下面以我的站点 https://bashellwang.github.io/ 来进行简单说明Hexo 主要有两份配置文件（文件名均为 _config.yml）：一份在站点根目录下，一份在主题 theme 目录下，我们可以分别称为站点配置文件和主题配置文件。 在 theme 目录下下载主题 1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 站点配置文件中启用主题 1theme: next 主题配置文件中选用主题特性，使用 Pisces 特性 123#scheme: Muse#scheme: Mistscheme: Pisces 这样即完成了基本的网站主题设置，更多详情请参考 NexT 使用文档 最终成品https://bashellwang.github.io/]]></content>
      <tags>
        <tag>Mac</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F06%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>